<!doctype html>
<html lang="en-US">
<head>
    <title>Graderoom</title>
    <link rel="icon" href="../../public/resources/common/icon.png">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Montserrat:500&display=swap">
    <% let theme; %>
    <% let date = new Date(); %>
    <% let zeroTime = new Date("0/" + date.getHours() + ":" + date.getMinutes()); %>
    <% zeroTime = zeroTime.getTime(); %>
    <% if (JSON.parse(appearance).theme === "dark") { %>
        <% theme = true; %>
        <link id="pageStyle" rel="stylesheet" type="text/css" href="../../public/css/dark_mode.css">
    <% } else if (JSON.parse(appearance).theme === "light") { %>
        <% theme = false; %>
        <link id="pageStyle" rel="stylesheet" type="text/css" href="../../public/css/light_mode.css">
    <% } else if (JSON.parse(appearance).theme === "auto" && (((JSON.parse(appearance).darkModeStart < JSON.parse(appearance).darkModeFinish) && ((zeroTime >= JSON.parse(appearance).darkModeStart) && (zeroTime < JSON.parse(appearance).darkModeFinish))) || ((JSON.parse(appearance).darkModeStart > JSON.parse(appearance).darkModeFinish) && ((zeroTime >= JSON.parse(appearance).darkModeStart) || (zeroTime < JSON.parse(appearance).darkModeFinish))))) { %>
        <% theme = true; %>
        <link id="pageStyle" rel="stylesheet" type="text/css" href="../../public/css/dark_mode.css">
    <% } else if (JSON.parse(appearance).theme === "system") { %>
        <% theme = true; %>
        <link id="pageStyle" rel="stylesheet" type="text/css" href="../../public/css/dark_mode.css">
    <% } else if (JSON.parse(appearance).theme === "sun" && ((zeroTime >= sunset.getTime()) || (zeroTime <= sunrise.getTime()))) { %>
        <% theme = true; %>
        <link id="pageStyle" rel="stylesheet" type="text/css" href="../../public/css/dark_mode.css">
    <% } else { %>
        <% theme = false; %>
        <link id="pageStyle" rel="stylesheet" type="text/css" href="../../public/css/light_mode.css">
    <% } %>
    <link rel="stylesheet" type="text/css" href="../../public/css/main.css">
    <link id="blur_base" rel="stylesheet" type="text/css" href="../../public/css/blur.css"
          <% if (!JSON.parse(appearance).blurEffects) { %>disabled
            <% } %>
    >
    <link id="blur_overrides" rel="stylesheet" type="text/css"
    <% if (theme === true) { %>
          href="../../public/css/dark_blur.css"
    <% } else if (theme === false) { %> href="../../public/css/light_blur.css"
            <% } %>
          <% if (!JSON.parse(appearance).blurEffects) { %>disabled
            <% } %>
    >
    <link id="fade" rel="stylesheet" type="text/css" href="../../public/css/fade.css" disabled>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <script src="https://cdn.jsdelivr.net/npm/moment@2.24.0/moment.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js@3.5.1/dist/chart.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/hammerjs@2.0.8"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/chartjs-plugin-zoom/1.1.1/chartjs-plugin-zoom.min.js"
            integrity="sha512-NxlWEbNbTV6acWnTsWRLIiwzOw0IwHQOYUCKBiu/NqZ+5jSy7gjMbpYI+/4KvaNuZ1qolbw+Vnd76pbIUYEG8g=="
            crossorigin="anonymous"
            referrerpolicy="no-referrer"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-moment"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js"></script>
</head>
<body>

<!-- Admin Navbar -->
<% include ../partials/user/navbar.ejs %>
<div class="container">
    <br>
    <h1>
        Usage Statistics
    </h1>
    <div class="chart-container chart" style="height: unset; width: unset; display: block">
        <div class="tab" style="border-radius: 0.5rem">
            <btn id="btn-0" class="tablinks" onclick="setBounds(0)">5D</btn>
            <btn id="btn-1" class="tablinks" onclick="setBounds(1)">1M</btn>
            <btn id="btn-2" class="tablinks" onclick="setBounds(2)">6M</btn>
            <btn id="btn-3" class="tablinks" onclick="setBounds(3)">YTD</btn>
            <btn id="btn-4" class="tablinks" onclick="setBounds(4)">1Y</btn>
            <btn id="btn-4" class="tablinks active" onclick="setBounds(5)">MAX</btn>
        </div>
        <button id="reset-zoom-1" style="display:none; position: absolute; right: 0"
                class="btn btn-sm" onclick="resetZoom('main'); $(this).hide()">Reset
        </button>
        <canvas id="chart">
        </canvas>
    </div>
</div>

<script>

    let checkingTheme;
    let appearance = <%- appearance; %>;
    let theme = appearance.theme;
    let darkModeStart = appearance.darkModeStart;
    let darkModeFinish = appearance.darkModeFinish;
    let sunrise = <%= sunrise.getTime(); %>;
    let sunset = <%= sunset.getTime(); %>;

    if (theme === "auto" || theme === "sun") {
        checkTime();
    }

    function setAutoTheme() {
        let zeroTime = new Date(0);
        zeroTime.setHours(new Date().getHours());
        zeroTime.setMinutes(new Date().getMinutes());
        zeroTime = zeroTime.getTime();
        if (theme !== "auto" && theme !== "sun" && theme !== "system") {
            if (checkingTheme) {
                clearInterval(checkingTheme);
            }
            return;
        }

        if ((theme === "system" && window.matchMedia && window.matchMedia("(prefers-color-scheme: dark)").matches) || (theme === "sun" && (zeroTime >= sunset || zeroTime <= sunrise)) || (theme === "auto" && (((darkModeStart < darkModeFinish) && ((zeroTime >= darkModeStart) && (zeroTime < darkModeFinish)) || ((darkModeStart > darkModeFinish) && ((zeroTime >= darkModeStart) || (zeroTime < darkModeFinish))))))) {
            let oldDarkMode = document.getElementById("pageStyle").getAttribute("href") === "../../public/css/dark_mode.css";
            darkMode = true;
            if (darkMode !== oldDarkMode) {
                document.getElementById("fade").disabled = false;
                document.getElementById("pageStyle").setAttribute("href", "../../public/css/dark_mode.css");
                if (appearance.blurEffects) {
                    document.getElementById("blur_overrides").setAttribute("href", "../../public/css/dark_blur.css");
                }
                $(".navbar-brand img").attr("src", "/public/resources/dark_mode/logo.png");
                $(".navbar").removeClass("navbar-light").addClass("navbar-dark");
                setTimeout(() => {
                    document.getElementById("fade").disabled = true;
                }, 500);
                if (appearance.seasonalEffects) {
                    init = performance.now();
                    if (darkMode === false) {
                        $("#light_snowfall").attr("media", "");
                    } else if (darkMode) {
                        $("#light_snowfall").attr("media", "not all");
                    }
                }
            }
        } else {
            let oldDarkMode = document.getElementById("pageStyle").getAttribute("href") === "../../public/css/dark_mode.css";
            darkMode = false;
            if (darkMode !== oldDarkMode) {
                document.getElementById("fade").disabled = false;
                document.getElementById("pageStyle").setAttribute("href", "../../public/css/light_mode.css");
                if (appearance.blurEffects) {
                    document.getElementById("blur_overrides").setAttribute("href", "../../public/css/light_blur.css");
                }
                $(".navbar-brand img").attr("src", "/public/resources/light_mode/logo.png");
                $(".navbar").removeClass("navbar-dark").addClass("navbar-light");
                setTimeout(() => {
                    document.getElementById("fade").disabled = true;
                }, 500);
                if (appearance.seasonalEffects) {
                    init = performance.now();
                    if (darkMode === false) {
                        $("#light_snowfall").attr("media", "");
                    } else if (darkMode) {
                        $("#light_snowfall").attr("media", "not all");
                    }
                }
            }
        }
    }

    async function checkTime() {
        if (checkingTheme) {
            clearInterval(checkingTheme);
        }
        setAutoTheme();
        checkingTheme = window.setInterval(function () {
            setAutoTheme();
        }, 100);
    }

    let loginData = <%- loginData; %>;
    let uniqueLoginData = <%- uniqueLoginData; %>;
    let syncData = <%- syncData; %>;
    let userData = <%- userData; %>;
    let uniqueUsersData = <%- uniqueUsersData; %>;

    // Fill in holes in loginData
    let length = loginData.length;
    for (let i = 1; i < length; i++) {
        console.log(`${i} | ${length}`)
        let prevDate = new Date(loginData[i - 1].x);
        let currDate = new Date(loginData[i].x);

        let diffInDays = Math.round((currDate.getTime() - prevDate.getTime()) / (24 * 60 * 60 * 1000));

        for (let j = 1; j < diffInDays; j++) {
            console.log(i + j - 1);
            loginData.splice(i + j - 1, 0, {x: new Date(prevDate.getTime() + j * 24 * 60 * 60 * 1000).toISOString(), y: 0});
            uniqueLoginData.splice(i + j - 1, 0, {x: new Date(prevDate.getTime() + j * 24 * 60 * 60 * 1000).toISOString(), y: 0});
            syncData.splice(i + j - 1, 0, {x: new Date(prevDate.getTime() + j * 24 * 60 * 60 * 1000).toISOString(), y: 0});
            userData.splice(i + j - 1, 0, {x: new Date(prevDate.getTime() + j * 24 * 60 * 60 * 1000).toISOString(), y: userData[i - 1].y});
            uniqueUsersData.splice(i + j - 1, 0, {x: new Date(prevDate.getTime() + j * 24 * 60 * 60 * 1000).toISOString(), y: uniqueUsersData[i - 1].y});
            length++;
        }

        i += Math.max(diffInDays - 1, 0);
        console.log(length);
    }

    let chart;

    function resetZoom() {
        chart.resetZoom();
    }

    let dataset = [];
    let loginsDataset = {
        label: "Logins",
        backgroundColor: "transparent",
        pointBackgroundColor: "green",
        pointBorderColor: "transparent",
        borderColor: "green",
        data: loginData,
        cubicInterpolationMode: "monotone",
        spanGaps: false,
        pointRadius: 1,
        borderWidth: 1,
        pointHoverRadius: 3,
        pointHoverBackgroundColor: "green",
        pointHoverBorderColor: "green",
        pointHoverBorderWidth: 2
    };
    let uniqueLoginDataset = {
        label: "Unique Logins",
        backgroundColor: "transparent",
        pointBackgroundColor: "red",
        pointBorderColor: "transparent",
        borderColor: "red",
        data: uniqueLoginData,
        cubicInterpolationMode: "monotone",
        spanGaps: false,
        pointRadius: 1,
        borderWidth: 1,
        pointHoverRadius: 3,
        pointHoverBackgroundColor: "red",
        pointHoverBorderColor: "red",
        pointHoverBorderWidth: 2
    };
    let syncsDataset = {
        label: "Syncs",
        backgroundColor: "transparent",
        pointBackgroundColor: "orange",
        pointBorderColor: "transparent",
        borderColor: "orange",
        data: syncData,
        cubicInterpolationMode: "monotone",
        spanGaps: false,
        pointRadius: 1,
        borderWidth: 1,
        pointHoverRadius: 3,
        pointHoverBackgroundColor: "orange",
        pointHoverBorderColor: "orange",
        pointHoverBorderWidth: 2
    };
    let numUsersDataset = {
        label: "Num Users",
        backgroundColor: "transparent",
        pointBackgroundColor: "blue",
        pointBorderColor: "transparent",
        borderColor: "blue",
        data: userData,
        cubicInterpolationMode: "monotone",
        spanGaps: false,
        pointRadius: 1,
        borderWidth: 1,
        pointHoverRadius: 3,
        pointHoverBackgroundColor: "blue",
        pointHoverBorderColor: "blue",
        pointHoverBorderWidth: 2
    };
    let uniqueUsersDataset = {
        label: "Active Users",
        backgroundColor: "transparent",
        pointBackgroundColor: "purple",
        pointBorderColor: "transparent",
        borderColor: "purple",
        data: uniqueUsersData,
        cubicInterpolationMode: "monotone",
        spanGaps: false,
        pointRadius: 1,
        borderWidth: 1,
        pointHoverRadius: 3,
        pointHoverBackgroundColor: "purple",
        pointHoverBorderColor: "purple",
        pointHoverBorderWidth: 2
    };
    dataset.push(loginsDataset);
    dataset.push(uniqueLoginDataset);
    dataset.push(syncsDataset);
    dataset.push(numUsersDataset);
    dataset.push(uniqueUsersDataset);
    let ctx = document.getElementById("chart");
    chart = new Chart(ctx, {
        type: "line", data: {
            datasets: dataset
        }, options: {
            hover: {
                mode: "index", intersect: false
            }, scales: {
                xAxis: {
                    type: "time", time: {
                        unit: "year"
                    }, ticks: {
                        color: (document.getElementById("pageStyle").getAttribute("href") === "../../public/css/dark_mode.css" ? "white" : "black"),
                        fontFamily: "Verdana",
                        fontSize: "13"
                    }, grid: {
                        color: (document.getElementById("pageStyle").getAttribute("href") === "../../public/css/dark_mode.css" ? "#555555" : "#CCCCCC")
                    }
                }, yAxis: {
                    ticks: {
                        color: (document.getElementById("pageStyle").getAttribute("href") === "../../public/css/dark_mode.css" ? "white" : "black"),
                        fontFamily: "Verdana",
                        fontSize: "12"
                    }, grid: {
                        color: (document.getElementById("pageStyle").getAttribute("href") === "../../public/css/dark_mode.css" ? "#555555" : "#CCCCCC"),
                        drawBorder: false
                    }
                }
            }, animation: {
                easing: "easeOutCubic"
            }, legend: {
                display: true, position: "top", labels: {
                    usePointStyle: true,
                    fontColor: (document.getElementById("pageStyle").getAttribute("href") === "../../public/css/dark_mode.css" ? "white" : "black"),
                    fontFamily: "Verdana",
                    boxWidth: 20,
                    fontSize: 13
                }
            }, responsive: true, maintainAspectRatio: true, plugins: {
                legend: {
                    display: true, position: "top", labels: {
                        usePointStyle: true,
                        color: (document.getElementById("pageStyle").getAttribute("href") === "../../public/css/dark_mode.css" ? "white" : "black"),
                        fontFamily: "Verdana",
                        boxWidth: 20,
                        fontSize: 13,
                        filter: function (item) {
                            return !item.text.includes("undefined");
                        }
                    }
                }, tooltip: {
                    enabled: true, mode: "index", intersect: false, displayColors: true, caretSize: 10, callbacks: {
                        title: function (tooltipItems) {
                            return new Date(tooltipItems[0].label).toDateString();
                        }
                    }
                }, zoom: {
                    zoom: {
                        wheel: {
                            enabled: true, speed: 0.05
                        }, pinch: {
                            enabled: true, threshold: 100
                        }, drag: {enabled: true}, mode: "xy", onZoom: ({chart}) => {
                            $("#reset-zoom-1").show();

                            // Disable hovering and tooltips to make animation smoother
                            chart.options.hover.mode = null;
                            chart.options.plugins.tooltip.enabled = false;
                        }, onZoomComplete: ({chart}) => {
                            chart.options.hover.mode = "nearest";
                            chart.options.plugins.tooltip.enabled = true;
                        }
                    }
                }
            }
        }
    });

    function setBounds(index) {
        // 0 is 5 days
        // 1 is 1 month
        // 2 is 6 months
        // 3 is year to date
        // 4 is 1 year
        // 5 is max

        // First activate the right buttons
        let btns = $(".chart-container .tablinks");
        btns.removeClass("active");
        $(btns[index]).addClass("active");

        // Then, update the chart
        chart.resetZoom();

        let now = Date.now();
        const dayLength = 24 * 60 * 60 * 1000;
        now = (now - (now % dayLength)); // Get full day
        console.log(now);

        let min, max, unit;

        switch (index) {
            case 0:
                min = now - 5 * dayLength;
                unit = "day";
                break;
            case 1:
                min = now - 30 * dayLength;
                unit = "week";
                break;
            case 2:
                min = now - 183 * dayLength;
                unit = "month";
                break;
            case 3:
                min = new Date(`1/1/${new Date().getFullYear()}`).getTime();
                max = new Date(`1/1/${new Date().getFullYear() + 1}`).getTime();
                unit = "month";
                break;
            case 4:
                min = now - 366 * dayLength;
                unit = "month";
                break;
            case 5:
                unit = "year";
                break;
        }
        chart.options.scales.xAxis.min = min;
        chart.options.scales.xAxis.max = max;
        chart.options.scales.xAxis.time.unit = unit;
        chart.options.hover.mode = "index";
        chart.update();
    }
</script>
</body>
