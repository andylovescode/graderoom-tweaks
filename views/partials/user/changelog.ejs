<!-- Changelog Card -->
<div class="blurred-login" id="changelogDisplay">
    <div class="blurred-background"></div>
    <div class="col-sm-11 col-md-10 col-lg-9 col-xl-8 mx-auto">
        <div id="changelogCard" class="card card-signin my-5">
            <btn class="btn btn-md"
                 onclick="closeForm('changelogDisplay')"
                 style="width: fit-content; width: -moz-fit-content; margin-bottom:0">
                <i class="fa fa-close" aria-hidden="true"></i> Close
            </btn>
            <div class="card-body">
                <h1 class="card-title text-center changelog-title">
                    <span class="fa fa-book"></span> Changelog
                </h1>
                <div class="changelog-parent">
                    <div id="changelog-legend-column" class="card changelog-legend-column">

                    </div>
                    <div class="card changelog">
                        <div id="changelog-container" class="changelog-container placeholder"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script>

    let changelogContainer = $("#changelog-container");
    let changelogLegendColumn = $("#changelog-legend-column");
    let latestVersion;
    let versionOffsets = {};
    let versionNames = [];
    let versionClasses = []
    let versionDates = [];
    let versionMessages = [];
    let cachedHTML = {};
    let changelogLegendArray;
    let changelogLegendReferences;

    function showChangelog(callback=false, whatsNew=false) {
        if (!callback && !whatsNew) {
            showVersion(false);
            showCard("#changelogDisplay");
        }
        return new Promise(async resolve => {
            if (changelogLegendArray !== undefined) {
                latestVersion = await $.ajax({
                                                     url: "/latestVersion", type: "GET", async: true
                                             }).catch(() => {});
            }
            if (changelogLegendArray === undefined || !versionNames[1]?.endsWith(latestVersion)) {
                await $.ajax({
                                 url: "/changelogLegend", type: "GET", async: true
                             }).done(function (response) {
                    if (typeof response === "string" && response.startsWith("<!")) {  // If logged out
                        $(".session-timeout").show();
                        $("body").find("*").not(".session-timeout").remove();
                        return;
                    }
                    changelogLegendArray = response;
                    changelogLegendColumn.empty();
                });
            } else if (!callback && whatsNew && alerts.notificationSettings.showUpdatePopup) {
                if (!latestVersion.endsWith(alerts.latestSeen)) {
                    showCard("#changelogDisplay");
                    showVersion(latestVersion);
                }
                $(".changelog-parent, .changelog-parent > div").addClass("show");
                return resolve();
            } else if (callback && versionNames) {
                // noinspection JSValidateTypes
                callback(versionNames, versionDates, versionMessages);
                return resolve();
            }
            changelogLegendReferences = changelogLegendArray.map(x => $(x));
            changelogLegendColumn.html(changelogLegendReferences);
            changelogContainer.scrollTop(0);
            changelogLegendColumn.scrollTop(0);
            versionNames = [];
            versionOffsets = {};
            for (let i = 0; i < changelogLegendReferences.length; i++) {
                let version = $(changelogLegendReferences[i]);
                let name = version.contents().filter((i, el) => el.nodeType === 3).text();
                version.on("click", () => showVersion(name));
                versionNames.push(name);
                let date = version.text().slice(name.length);
                // Add offset so versions on the same day are ordered correctly in notifications
                versionDates.push(new Date(`${date.slice(0, 10)}/0:`).getTime() + changelogLegendReferences.length - i);
                versionMessages.push(date.slice(13));
            }
            if (callback) {
                // noinspection JSValidateTypes
                callback(versionNames, versionDates, versionMessages);
                return resolve();
            }

            $(".changelog-parent, .changelog-parent > div").addClass("show");
            resolve();
        });
    }

    function showVersion(version) {
        if (version === false) {
            changelogContainer.html("");
            changelogContainer.addClass("placeholder");
            return;
        } else if (!(version in cachedHTML)) {
            $.ajax({
                       url: "/changelog", type: "GET", async: true, data: {versionName: version}
                   }).done((response) => {
                if (typeof response === "string" && response.startsWith("<!")) {  // If logged out
                    $(".session-timeout").show();
                    $("body").find("*").not(".session-timeout").remove();
                    return;
                }
                changelogContainer.html(response);
                cachedHTML[version] = response;
            });
        } else {
            changelogContainer.html(cachedHTML[version]);
        }
        let idx = versionNames.indexOf(version);
        if (idx === -1) return;
        changelogContainer.removeClass("placeholder");
        changelogLegendReferences.forEach((v) => v.removeClass("active"));
        changelogLegendReferences[idx].addClass("active");
        if (version === latestVersion) {
            $.ajax({
                       url: "/latestVersionSeen", type: "POST", async: true
                   }).done((response) => {
                if (typeof response === "string" && response.startsWith("<!")) {  // If logged out
                    $(".session-timeout").show();
                    $("body").find("*").not(".session-timeout").remove();
                    return;
                }
                alerts.latestSeen = versionNames[1].substring(versionNames[1].indexOf(" ") + 1);
            });
            dismissById(version);
        }
    }
</script>
