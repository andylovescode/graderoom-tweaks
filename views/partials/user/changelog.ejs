<!-- Changelog Card -->
<div class="blurred-login" id="changelogDisplay">
    <div class="blurred-background"></div>
    <div class="col-sm-11 col-md-10 col-lg-9 col-xl-8 mx-auto">
        <div id="changelogCard" class="card card-signin my-5">
            <btn class="btn btn-md"
                 onclick="closeForm('changelogDisplay')"
                 style="width: fit-content; width: -moz-fit-content; margin-bottom:0">
                <i class="fa fa-close" aria-hidden="true"></i> Close
            </btn>
            <div class="card-body">
                <h1 class="card-title text-center changelog-title">
                    <span class="fa fa-book"></span> Changelog
                </h1>
                <div class="changelog-parent">
                    <div id="changelog-legend-column" class="card changelog-legend-column">

                    </div>
                    <div class="card changelog">
                        <div id="changelog-container" class="changelog-container"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script>

    let changelogContainer = $("#changelog-container");
    let changelogLegendColumn = $("#changelog-legend-column");
    let versionDivs;
    let versionOffsets = {};
    let versionNames = [];
    let versionClasses = []
    let versionDates = [];
    let versionMessages = [];
    let stableVersionNames = [];
    let versionDisplayed;
    let changelogArray;
    let changelogContent = {};
    let changelogReferences;
    let onScreenVersion = "Known Issues";

    function showChangelog(callback) {
        return new Promise(async resolve => {
            let latestVersion;
            if (changelogArray !== undefined) {
                latestVersion = await $.ajax({
                                                     url: "/latestVersion", type: "GET", async: true
                                                 });
            }
            if (changelogArray === undefined || !versionNames[1]?.endsWith(latestVersion)) {
                await $.ajax({
                                 url: "/changelog", type: "GET", async: true
                             }).done(function (response) {
                    if (typeof response === "string" && response.startsWith("<!")) {  // If logged out
                        $(".session-timeout").show();
                        $("body").find("*").not(".session-timeout").remove();
                        return;
                    }
                    changelogArray = response;
                    changelogLegendColumn.empty();
                });
            }
            let onScreenBeforeSetup = onScreenVersion;
            changelogReferences = changelogArray.map(x => $(x));
            changelogContainer.html(changelogReferences);
            changelogContainer.append(`<div style="height: 100%"></div>`);
            versionDivs = $("#changelogDisplay .changelog-item");
            changelogContainer.animate({scrollTop: 0}, async () => {
                versionNames = [];
                versionOffsets = {};
                let dismissNotifications = true;
                for (let i = 0; i < versionDivs.length; i++) {
                    let version = versionDivs[i];
                    let name = $(version).find(".title")[0].innerText;
                    versionNames.push(name);
                    if (!callback) {
                        if (dismissNotifications && i >= 1) {
                            dismissById(name, false);
                        }
                        if (name.endsWith(alerts.latestSeen)) {
                            dismissNotifications = false;
                            updateNotifications();
                            if (!callback) {
                                $.ajax({
                                           url: "/latestVersionSeen", type: "POST", async: true
                                       }).done((response) => {
                                    if (typeof response === "string" && response.startsWith("<!")) {  // If logged out
                                        $(".session-timeout").show();
                                        $("body").find("*").not(".session-timeout").remove();
                                        return;
                                    }
                                    alerts.latestSeen = versionNames[1].substring(versionNames[1].indexOf(" ") + 1);
                                });
                            }
                        }
                    }
                    let date = $(version).find(".date")[0].innerText;
                    // Add offset so versions on the same day are ordered correctly in notifications
                    versionDates.push(new Date(`${date.slice(0, 10)}/0:`).getTime() + versionDivs.length - i);
                    versionMessages.push(date.slice(13));
                    let class_ = $.makeArray(version.classList).filter((c) => c !== "changelog-item")[0] ?? "";
                    versionClasses.push(class_);
                    versionOffsets[name] = $(version).offset().top - changelogContainer.offset().top;
                    changelogContent[name] = $(version).find(".content")[0].innerHTML;
                    let v;
                    if (changelogLegendColumn.children("div").length < versionDivs.length) {
                        v = $(`<div class="${class_}">${name}<p class="date">${date}</p></div>`);
                        if (name === onScreenVersion) {
                            v.addClass("active");
                        }
                        v.click(() => scrollToVersion(name));
                        changelogLegendColumn.append(v);
                    } else {
                        v = $(changelogLegendColumn.children("div")[i])
                    }
                    versionOffsets[`${name}-legend`] = $(v).offset().top - changelogLegendColumn.offset().top;
                }

                changelogContainer.unbind("scroll");
                changelogContainer.on("scroll", function () {
                    let versionIndex = getOnScreenVersionIndex();
                    onScreenVersion = versionNames[versionIndex];
                    if (versionIndex > 0) {
                        let previousVersionHeight = versionOffsets[onScreenVersion] - versionOffsets[versionNames[versionIndex - 1]];
                        let previousVersionInvisibleHeight = changelogContainer.offset().top - $(versionDivs[versionIndex - 1]).offset().top;
                        let previousFractionInvisible = previousVersionInvisibleHeight / previousVersionHeight;
                        let previousLegendItemHeight = versionOffsets[`${onScreenVersion}-legend`] - versionOffsets[`${versionNames[versionIndex - 1]}-legend`];
                        let offset = versionOffsets[`${versionNames[versionIndex - 1]}-legend`] + (previousFractionInvisible * previousLegendItemHeight)
                        changelogLegendColumn.animate({scrollTop: offset}, 0);
                        if (previousFractionInvisible < 0.5) return;
                    } else {
                        changelogLegendColumn.animate({scrollTop: 0}, 0);
                    }
                    let legendItem = $(changelogLegendColumn.children("div")[versionIndex]);
                    if (!legendItem.hasClass("active")) {
                        changelogLegendColumn.children("div").removeClass("active");
                        legendItem.addClass("active");
                    }
                    scrolling = true;
                });

                stableVersionNames = versionNames.filter(n => n.substring(0, 6) === "Stable" || n === "Known Issues");
                scrollToVersion(onScreenBeforeSetup, 500);
                if (callback) {
                    callback(versionNames);
                    return resolve();
                }
                let fixedIn = versionDivs.find(".content").children(".body").children("strong");
                for (let i = 0; i < fixedIn.length; i++) {
                    let link = $(fixedIn[i]);
                    link.click(() => {
                        scrollToVersion(link[0].innerText.substring(10, link[0].innerText.length - 1));
                    });
                }
                resolve();
            });
            if (!callback) {
                showCard("#changelogDisplay");
            }
        });
    }

    let scrolling = false;

    function scrollToVersion(version, scrollTime = 1000) {
        if (scrolling) {
            changelogContainer.stop();
        }
        scrolling = true;
        changelogContainer.animate({scrollTop: versionOffsets[version]}, scrollTime);
    }

    function getOnScreenVersionIndex() {
        let versions = $("#changelogDisplay .changelog-item");
        let onScreenVersionIndex = 0;
        for (let i = versions.length - 2; i >= 0; i--) {
            if ($(versions[i]).offset().top - changelogContainer.offset().top < 0) {
                onScreenVersionIndex = i + 1;
                break;
            }
        }
        return onScreenVersionIndex;
    }

</script>
