<!-- Changelog Card -->
<div class="blurred-login" id="changelogDisplay">
    <div class="blurred-background"></div>
    <div class="col-sm-11 col-md-10 col-lg-9 col-xl-8 mx-auto">
        <div id="changelogCard" class="card card-signin my-5">
            <btn class="btn btn-md"
                 onclick="closeForm('changelogDisplay')"
                 style="width: fit-content; width: -moz-fit-content; margin-bottom:0">
                <i class="fa fa-close" aria-hidden="true"></i> Close
            </btn>
            <div class="card-body">
                <h1 class="card-title text-center changelog-title">
                    <span class="fa fa-book"></span> Changelog
                </h1>
                <div class="changelog-parent">
                    <div id="changelog-legend-column" class="card changelog-legend-column">

                    </div>
                    <div class="card changelog">
                        <div id="changelog-container" class="changelog-container"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script>

    let changelogContainer = $("#changelog-container");
    let changelogLegendColumn = $("#changelog-legend-column");
    let versionOffsets = {};
    let versionNames = [];
    let versionClasses = []
    let versionDates = [];
    let stableVersionNames = [];
    let versionDisplayed;
    let nextVersion;
    let previousVersion;
    let changelogArray;
    let changelogContent = {};
    let changelogReferences;
    let onScreenVersion = "Known Issues";

    async function showChangelog(callback = false) {
        return new Promise(resolve => {
            $.ajax({
                       url: "/changelog", type: "GET", async: true
                   }).done(function (response) {
                if (typeof response === "string" && response.startsWith("<!")) {  // If logged out
                    $(".session-timeout").show();
                    $("body").find("*").not(".session-timeout").remove();
                    return;
                }
                let onScreenBeforeSetup = onScreenVersion;
                if (!callback) {
                    if (cardsDisplayed.includes("changelogDisplay")) {
                        cardsDisplayed.splice(cardsDisplayed.indexOf("changelogDisplay"), 1);
                    }
                    cardsDisplayed.push("changelogDisplay");
                    $(".blurred-background").each(function () {
                        if (cardsDisplayed.includes($($(this).parent())[0].id)) {
                            $(this).parent().css("z-index", cardsDisplayed.indexOf($($(this).parent())[0].id) + minCardZIndex);
                        }
                    });
                }
                changelogArray = response;
                changelogReferences = changelogArray.map(x => $(x));
                changelogContainer.html(changelogReferences);
                let versions = $("#changelogDisplay .changelog-item");
                changelogContainer.animate({scrollTop: 0}, async () => {
                    versionNames = [];
                    versionOffsets = {};
                    for (let version of versions) {
                        versionNames.push($(version).find(".title")[0].innerText);
                        versionDates.push($(version).find(".date")[0].innerText);
                        versionClasses.push($.makeArray(version.classList).filter((c) => c !== "changelog-item")[0] ?? "");
                        versionOffsets[versionNames.slice(-1)[0]] = $(version).offset().top - changelogContainer.offset().top;
                        changelogContent[versionNames.slice(-1)[0]] = $(version).find(".content")[0].innerHTML;
                    }
                    scrollToNextStable(false);
                    scrollToPrevStable(false);
                    scrollToNextAnnouncement(false);
                    scrollToPrevAnnouncement(false);
                    stableVersionNames = versionNames.filter(n => n.substring(0, 6) === "Stable" || n === "Known Issues");
                    scrollToVersion(onScreenBeforeSetup, 0);
                    if (callback) {
                        callback(versionNames);
                    }
                    resolve();
                    changelogLegendColumn.empty();
                    for (let i = 0; i < versionNames.length; i++) {
                        let version = versionNames[i];
                        let extraClass = versionClasses[i];
                        let date = versionDates[i];
                        let v = $(`<div class="${extraClass}">${version}<p class="date">${date}</p></div>`);
                        v.click(() => scrollToVersion(version));
                        changelogLegendColumn.append(v);
                    }
                });
                let fixedIn = versions.find(".content").children(".body").children("strong");
                for (let i = 0; i < fixedIn.length; i++) {
                    let link = $(fixedIn[i]);
                    link.click(() => {
                        scrollToVersion(link[0].innerText.substring(10, link[0].innerText.length - 1));
                    });
                }
                if (!callback) {
                    $("#changelogDisplay").fadeIn(500);
                }
            });
        });
    }

    function scrollToNextVersion() {
        scrollToVersion(nextVersion);
    }

    function scrollToPreviousVersion() {
        scrollToVersion(previousVersion);
    }

    function scrollToNextStable(scroll = true) {
        let onScreenVersionIndex = getOnScreenVersionIndex();
        let version = versionNames.find((v, index) => index > onScreenVersionIndex && v.substring(0, 6) === "Stable");
        if (version) {
            if (scroll) {
                scrollToVersion(version);
            }
        }
    }

    function scrollToPrevStable(scroll = true) {
        let onScreenVersionIndex = getOnScreenVersionIndex();
        let version = versionNames.slice().reverse().find((v, index, arr) => (index >= arr.length - onScreenVersionIndex) && v.substring(0, 6) === "Stable");
        if (version) {
            if (scroll) {
                scrollToVersion(version);
            }
        }
    }

    function scrollToCurrent() {
        scrollToVersion($(".changelog-item.current .header .title")[0].innerText);
    }

    function scrollToNextAnnouncement(scroll = true) {
        let onScreenVersionIndex = getOnScreenVersionIndex();
        let version = versionNames.find((v, index) => index > onScreenVersionIndex && v.substring(0, 12) === "Announcement");
        if (version) {
            if (scroll) {
                scrollToVersion(version);
            }
        }
    }

    function scrollToPrevAnnouncement(scroll = true) {
        let onScreenVersionIndex = getOnScreenVersionIndex();
        let version = versionNames.slice().reverse().find((v, index, arr) => (index >= arr.length - onScreenVersionIndex) && v.substring(0, 12) === "Announcement");
        if (version) {
            if (scroll) {
                scrollToVersion(version);
            }
        }
    }

    let scrolling = false;

    function scrollToVersion(version, scrollTime = 1000) {
        if (scrolling) {
            changelogContainer.stop();
        }
        scrolling = true;
        changelogContainer.animate({scrollTop: versionOffsets[version]}, scrollTime);
    }

    function getOnScreenVersionIndex() {
        let versions = $("#changelogDisplay .changelog-item");
        let onScreenVersionIndex = 0;
        for (let i = 0; i < versions.length - 1; i++) {
            let onScreenOffset = Math.abs($(versions[i]).offset().top - changelogContainer.offset().top);
            if (Math.abs($(versions[i + 1]).offset().top - changelogContainer.offset().top) < onScreenOffset) {
                onScreenVersionIndex = i + 1;
            }
        }
        return onScreenVersionIndex;
    }

    changelogContainer.scroll(function () {
        onScreenVersion = versionNames[getOnScreenVersionIndex()];
        scrolling = true;
    });

</script>
